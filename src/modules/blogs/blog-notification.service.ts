import { InjectQueue } from '@nestjs/bullmq';
import { Injectable } from '@nestjs/common';
import { Queue } from 'bullmq';
import { QUEUE_NAMES } from 'src/constant';
import { ContentStatusType, PriorityType } from 'src/enums';
import { Blog } from '../blogs/entities/blog.entity';

export interface BlogNotificationData {
    blogId: string;
    blogTitle: string;
    status: ContentStatusType;
    authorId: string;
    reviewerId?: string;
    publisherId?: string;
    rejectionReason?: string;
    revisionNotes?: string;
}

@Injectable()
export class BlogNotificationService {
    constructor(
        @InjectQueue(QUEUE_NAMES.BLOG_NOTIFICATION)
        private notificationQueue: Queue,
    ) {}

    /**
     * Th√¥ng b√°o khi blog ƒë∆∞·ª£c submit for review
     */
    async notifyBlogSubmittedForReview(blog: Blog): Promise<void> {
        await this.notificationQueue.add('send-blog-notification', {
            notificationData: {
                userId: blog.author.id,
                title: 'üìù Blog ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·ªÉ duy·ªát',
                content: `Blog "${blog.title}" c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·ªÉ duy·ªát. Ch√∫ng t√¥i s·∫Ω xem x√©t v√† ph·∫£n h·ªìi trong th·ªùi gian s·ªõm nh·∫•t.`,
                type: 'BLOG_SUBMITTED',
                priority: PriorityType.NORMAL,
                actionUrl: `/blogs/${blog.id}`,
            },
        });
    }

    /**
     * Th√¥ng b√°o khi blog ƒë∆∞·ª£c approve
     */
    async notifyBlogApproved(blog: Blog): Promise<void> {
        await this.notificationQueue.add('send-blog-notification', {
            notificationData: {
                userId: blog.author.id,
                title: '‚úÖ B√†i vi·∫øt ƒë√£ ƒë∆∞·ª£c duy·ªát',
                content: `Ch√∫c m·ª´ng! B√†i vi·∫øt "${blog.title}" c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c duy·ªát v√† s·∫µn s√†ng ƒë·ªÉ c√¥ng khai.`,
                type: 'BLOG_APPROVED',
                priority: PriorityType.HIGH,
                actionUrl: `/blogs/${blog.id}`,
            },
        });
    }

    /**
     * Th√¥ng b√°o khi blog b·ªã reject
     */
    async notifyBlogRejected(
        blog: Blog,
        reviewerId: string,
        rejectionReason?: string,
    ): Promise<void> {
        const reasonText = rejectionReason
            ? `\n\nL√Ω do t·ª´ ch·ªëi: ${rejectionReason}`
            : '';

        await this.notificationQueue.add('send-blog-notification', {
            notificationData: {
                userId: blog.author.id,
                title: '‚ùå B√†i vi·∫øt b·ªã t·ª´ ch·ªëi',
                content: `B√†i vi·∫øt "${blog.title}" c·ªßa b·∫°n ƒë√£ b·ªã t·ª´ ch·ªëi.${reasonText}\n\nB·∫°n c√≥ th·ªÉ ch·ªânh s·ª≠a v√† g·ª≠i l·∫°i ƒë·ªÉ duy·ªát.`,
                type: 'BLOG_REJECTED',
                priority: PriorityType.HIGH,
                actionUrl: `/blogs/${blog.id}`,
            },
        });
    }

    /**
     * Th√¥ng b√°o khi blog c·∫ßn revision
     */
    async notifyBlogNeedsRevision(
        blog: Blog,
        revisionNotes?: string,
    ): Promise<void> {
        const notesText = revisionNotes ? `\n\nGhi ch√∫: ${revisionNotes}` : '';
        await this.notificationQueue.add('send-blog-notification', {
            notificationData: {
                userId: blog.author.id,
                title: '‚úèÔ∏è B√†i vi·∫øt c·∫ßn ch·ªânh s·ª≠a',
                content: `B√†i vi·∫øt "${blog.title}" c·ªßa b·∫°n c·∫ßn ch·ªânh s·ª≠a th√™m.${notesText}\n\nVui l√≤ng c·∫≠p nh·∫≠t v√† g·ª≠i l·∫°i ƒë·ªÉ duy·ªát.`,
                type: 'BLOG_NEEDS_REVISION',
                priority: PriorityType.NORMAL,
                actionUrl: `/blogs/${blog.id}`,
            },
        });
    }

    /**
     * Th√¥ng b√°o khi blog ƒë∆∞·ª£c publish
     */
    async notifyBlogPublished(blog: Blog): Promise<void> {
        await this.notificationQueue.add('send-blog-notification', {
            notificationData: {
                userId: blog.author.id,
                title: 'üöÄ B√†i vi·∫øt ƒë√£ ƒë∆∞·ª£c xu·∫•t b·∫£n',
                content: `Tuy·ªát v·ªùi! B√†i vi·∫øt "${blog.title}" c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c xu·∫•t b·∫£n v√† c√≥ th·ªÉ xem c√¥ng khai.`,
                type: 'BLOG_PUBLISHED',
                priority: PriorityType.HIGH,
                actionUrl: `/blogs/public/slug/${blog.slug}`,
            },
        });
    }

    /**
     * Th√¥ng b√°o khi blog ƒë∆∞·ª£c archive
     */
    async notifyBlogArchived(blog: Blog): Promise<void> {
        await this.notificationQueue.add('send-blog-notification', {
            notificationData: {
                userId: blog.author.id,
                title: 'üì¶ B√†i vi·∫øt ƒë√£ ƒë∆∞·ª£c l∆∞u tr·ªØ',
                content: `B√†i vi·∫øt "${blog.title}" c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c chuy·ªÉn v√†o l∆∞u tr·ªØ.`,
                type: 'BLOG_ARCHIVED',
                priority: PriorityType.LOW,
                actionUrl: `/blogs/${blog.id}`,
            },
        });
    }

    /**
     * Th√¥ng b√°o khi blog ƒë·∫°t milestone views
     */
    async notifyBlogViewsMilestone(
        blog: Blog,
        milestone: number,
    ): Promise<void> {
        await this.notificationQueue.add('send-blog-notification', {
            notificationData: {
                userId: blog.author.id,
                title: 'üëÄ B√†i vi·∫øt ƒë·∫°t milestone l∆∞·ª£t xem',
                content: `Ch√∫c m·ª´ng! B√†i vi·∫øt "${blog.title}" c·ªßa b·∫°n ƒë√£ ƒë·∫°t ${milestone.toLocaleString()} l∆∞·ª£t xem.`,
                type: 'BLOG_VIEWS_MILESTONE',
                priority: PriorityType.NORMAL,
                actionUrl: `/blogs/public/slug/${blog.slug}`,
            },
        });
    }

    /**
     * Th√¥ng b√°o t·ªïng h·ª£p cho admin v·ªÅ c√°c blog c·∫ßn review
     */
    async notifyAdminBlogsPendingReview(
        adminIds: string[],
        pendingCount: number,
    ): Promise<void> {
        const jobs = adminIds.map((adminId) =>
            this.notificationQueue.add('send-blog-notification', {
                notificationData: {
                    userId: adminId,
                    title: 'üìã C√≥ blog c·∫ßn duy·ªát',
                    content: `Hi·ªán c√≥ ${pendingCount} blog ƒëang ch·ªù duy·ªát. Vui l√≤ng ki·ªÉm tra v√† x·ª≠ l√Ω.`,
                    type: 'ADMIN_BLOGS_PENDING',
                    priority: PriorityType.NORMAL,
                    actionUrl: '/admin/blogs?status=pending_review',
                },
            }),
        );
        await Promise.all(jobs);
    }
}
