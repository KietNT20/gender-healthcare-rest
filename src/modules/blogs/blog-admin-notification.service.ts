import { Injectable } from '@nestjs/common';
import { Cron, CronExpression } from '@nestjs/schedule';
import { InjectRepository } from '@nestjs/typeorm';
import { ContentStatusType, PriorityType, RolesNameEnum } from 'src/enums';
import { IsNull, LessThanOrEqual, MoreThanOrEqual, Repository } from 'typeorm';
import { User } from '../users/entities/user.entity';
import { BlogNotificationService } from './blog-notification.service';
import { Blog } from './entities/blog.entity';

@Injectable()
export class BlogAdminNotificationService {
    constructor(
        @InjectRepository(Blog)
        private readonly blogRepository: Repository<Blog>,
        @InjectRepository(User)
        private readonly userRepository: Repository<User>,
        private readonly blogNotificationService: BlogNotificationService,
    ) {}

    /**
     * Ch·∫°y cron job m·ªói ng√†y l√∫c 9:00 AM ƒë·ªÉ th√¥ng b√°o v·ªÅ blogs pending review
     */
    @Cron(CronExpression.EVERY_DAY_AT_9AM)
    async sendDailyPendingBlogsNotification() {
        const pendingBlogsCount = await this.blogRepository.count({
            where: {
                status: ContentStatusType.PENDING_REVIEW,
                deletedAt: IsNull(),
            },
        });

        if (pendingBlogsCount > 0) {
            const adminUsers = await this.userRepository.find({
                where: [
                    { role: { name: RolesNameEnum.ADMIN } },
                    { role: { name: RolesNameEnum.MANAGER } },
                ],
                relations: ['role'],
            });

            const adminIds = adminUsers.map((user) => user.id);

            await this.blogNotificationService.notifyAdminBlogsPendingReview(
                adminIds,
                pendingBlogsCount,
            );
        }
    }

    /**
     * Th√¥ng b√°o ngay l·∫≠p t·ª©c khi c√≥ blog pending review qu√° l√¢u (> 3 ng√†y)
     */
    @Cron(CronExpression.EVERY_6_HOURS)
    async sendOverduePendingBlogsNotification() {
        const threeDaysAgo = new Date();
        threeDaysAgo.setDate(threeDaysAgo.getDate() - 3);
        const overdueBlogsCount = await this.blogRepository.count({
            where: {
                status: ContentStatusType.PENDING_REVIEW,
                updatedAt: LessThanOrEqual(threeDaysAgo),
                deletedAt: IsNull(),
            },
        });

        if (overdueBlogsCount > 0) {
            const adminUsers = await this.userRepository.find({
                where: [
                    { role: { name: RolesNameEnum.ADMIN } },
                    { role: { name: RolesNameEnum.MANAGER } },
                ],
                relations: ['role'],
            });

            const adminIds = adminUsers.map((user) => user.id);

            // Custom notification for overdue blogs
            const promises = adminIds.map((adminId) =>
                this.blogNotificationService['notificationsService'].create({
                    userId: adminId,
                    title: '‚ö†Ô∏è Blog qu√° h·∫°n duy·ªát',
                    content: `C√≥ ${overdueBlogsCount} blog ƒë√£ ch·ªù duy·ªát qu√° 3 ng√†y. Vui l√≤ng x·ª≠ l√Ω kh·∫©n c·∫•p!`,
                    type: 'ADMIN_BLOGS_OVERDUE',
                    priority: PriorityType.URGENT,
                    actionUrl:
                        '/admin/blogs?status=pending_review&overdue=true',
                }),
            );

            await Promise.all(promises);
        }
    } /**
     * Th·ªëng k√™ h√†ng tu·∫ßn v·ªÅ blog activities
     */
    @Cron('0 9 * * 1') // Every Monday at 9AM
    async sendWeeklyBlogStatistics() {
        const oneWeekAgo = new Date();
        oneWeekAgo.setDate(oneWeekAgo.getDate() - 7);
        const [publishedCount, rejectedCount, approvedCount] =
            await Promise.all([
                this.blogRepository.count({
                    where: {
                        status: ContentStatusType.PUBLISHED,
                        publishedAt: MoreThanOrEqual(oneWeekAgo),
                        deletedAt: IsNull(),
                    },
                }),
                this.blogRepository.count({
                    where: {
                        status: ContentStatusType.REJECTED,
                        updatedAt: MoreThanOrEqual(oneWeekAgo),
                        deletedAt: IsNull(),
                    },
                }),
                this.blogRepository.count({
                    where: {
                        status: ContentStatusType.APPROVED,
                        updatedAt: MoreThanOrEqual(oneWeekAgo),
                        deletedAt: IsNull(),
                    },
                }),
            ]);

        const adminUsers = await this.userRepository.find({
            where: [
                { role: { name: RolesNameEnum.ADMIN } },
                { role: { name: RolesNameEnum.MANAGER } },
            ],
            relations: ['role'],
        });

        const adminIds = adminUsers.map((user) => user.id);

        const promises = adminIds.map((adminId) =>
            this.blogNotificationService['notificationsService'].create({
                userId: adminId,
                title: 'üìä B√°o c√°o blog tu·∫ßn n√†y',
                content: `Tu·∫ßn v·ª´a qua: ${publishedCount} blog xu·∫•t b·∫£n, ${approvedCount} blog duy·ªát, ${rejectedCount} blog t·ª´ ch·ªëi.`,
                type: 'ADMIN_WEEKLY_STATS',
                priority: PriorityType.LOW,
                actionUrl: '/admin/dashboard/blog-statistics',
            }),
        );

        await Promise.all(promises);
    }

    /**
     * Th·ªëng k√™ h√†ng th√°ng v·ªÅ s·ªë blog ƒë∆∞·ª£c t·∫°o, ƒëang ch·ªù duy·ªát v√† ƒë∆∞·ª£c duy·ªát
     */
    @Cron('0 9 1 * *') // Every 1st day of month at 9AM
    async sendMonthlyBlogStatistics() {
        const now = new Date();
        const firstDayOfMonth = new Date(now.getFullYear(), now.getMonth(), 1);
        
        const [createdCount, pendingCount, approvedCount] = await Promise.all([
            // Blogs created this month
            this.blogRepository.count({
                where: {
                    createdAt: MoreThanOrEqual(firstDayOfMonth),
                    deletedAt: IsNull(),
                },
            }),
            // Blogs pending review
            this.blogRepository.count({
                where: {
                    status: ContentStatusType.PENDING_REVIEW,
                    deletedAt: IsNull(),
                },
            }),
            // Blogs approved this month
            this.blogRepository.count({
                where: {
                    status: ContentStatusType.APPROVED,
                    updatedAt: MoreThanOrEqual(firstDayOfMonth),
                    deletedAt: IsNull(),
                },
            }),
        ]);

        const adminUsers = await this.userRepository.find({
            where: [
                { role: { name: RolesNameEnum.ADMIN } },
                { role: { name: RolesNameEnum.MANAGER } },
            ],
            relations: ['role'],
        });

        const adminIds = adminUsers.map((user) => user.id);

        const promises = adminIds.map((adminId) =>
            this.blogNotificationService['notificationsService'].create({
                userId: adminId,
                title: 'üìà B√°o c√°o blog th√°ng n√†y',
                content: `Th√°ng n√†y: ${createdCount} blog ƒë∆∞·ª£c t·∫°o, ${pendingCount} blog ƒëang ch·ªù duy·ªát, ${approvedCount} blog ƒë∆∞·ª£c duy·ªát.`,
                type: 'ADMIN_MONTHLY_STATS',
                priority: PriorityType.LOW,
                actionUrl: '/admin/dashboard/blog-statistics',
            }),
        );

        await Promise.all(promises);
    }
}
